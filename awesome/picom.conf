#################################
#           Fading              #
#################################

# Fade windows in/out when opening/closing and when opacity changes,
# unless no-fading-openclose is used. Can be set per-window using rules.
#
# Default: false
fading = true;

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.03;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.03;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
# fade-delta = 10

# Do not fade on window open/close.
# no-fading-openclose = false

# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
# no-fading-destroyed-argb = false
#

#################################
#             Shadows           #
#################################

# Enabled client-side shadows on windows. Note desktop windows
# (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
# unless explicitly requested using the wintypes option.
#
# Can be set per-window using rules.
shadow = false;

# The blur radius for shadows, in pixels.
shadow-radius = 7;

# The opacity of shadows. Range: 0.0 - 1.0
shadow-opacity = 1;

# The left offset for shadows, in pixels.
shadow-offset-x = -7;

# The top offset for shadows, in pixels.
shadow-offset-y = -7;

# Hex string color value of shadow. Formatted like "#RRGGBB", e.g. "#C0FFEE".
shadow-color = "#B54B25";

#################################
#       General Settings        #
#################################

# inactive-dim = 0.6;
# inactive-opacity = 0.6;

corner-radius = 0;

# Enable remote control via D-Bus. See the man page for more details.
#
# Default: false
# dbus = true

# Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
# daemon = false

# Specify the backend to use: `xrender`, `glx`, or `egl`.
#
# Default: "xrender"
backend = "glx"

# Use higher precision during rendering, and apply dither when presenting the
# rendered screen. Reduces banding artifacts, but may cause performance
# degradation. Only works with OpenGL.
dithered-present = false;

# Enable/disable VSync.
#
# Default: false
vsync = true;

# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
#
# Has nothing to do with `corner-radius`.
#
# Default: false
detect-rounded-corners = true;

# Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
#
# Default: false
detect-client-opacity = true;

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
#
# Default: false
detect-transient = true;


# Use of damage information for rendering. This cause the only the part of the
# screen that has actually changed to be redrawn, instead of the whole screen
# every time. Should improve performance.
#
# Default: false
use-damage = true;

# Custom rules 
# Hint! Use 'xprop' utility tool to get specific application name or
# class if match doesn't work given value
rules = (
  { match = "!focused"; dim = 0.6; opacity = 0.6; },
	{ match = "class_g = 'awesome'"; shadow = false; opacity = 1.0; dim = 0.0; },
	{ match = "class_g = 'firefox'"; opacity = 1.0; dim = 0.0; },
	{ match = "class_g = 'Brave-browser'"; opacity = 1.0; dim = 0.0; },
	{ match = "class_g = 'browser'"; opacity = 1.0; dim = 0.0; },
	{ match = "class_g = 'chatterino'"; opacity = 1.0; dim = 0.0; },
	{ match = "class_g = 'Polybar'"; shadow = true; opacity = 1.0; dim = 0.0; },
)
